@startuml Class Diagram

class Server {
    - int serverSocket
    - vector<ClientHandler*> clientHandlers
    - int port
    - sockaddr_in addr
    - mutex clientsMutex

    + Server(int port)
    + ~Server()
    + void start()
    + void acceptConnections()
    + void broadcastMessage(string message)
    + void run()
    + void addClient(ClientHandler* handler)
    + void removeClient(ClientHandler* handler)

    - void setupAddress()
    - bool createSocket()
    - bool bindSocket()
    - void listenAndAccept()
}

class Client {
    - int socket
    - string username

    + Client(int socket, string username)
    + string receiveMessage()
    + void sendMessage(string message)
    - void sendResponse(const char* message)
}

class ClientHandler {
    - Client* client
    - Server* server
    - thread thread
    - atomic<bool> active

    + ClientHandler(Client* client, Server* server)
    + ~ClientHandler()
    + void start()
    + void run()
    + void stop()

    - void processMessages()
}

Server "1" *-- "many" ClientHandler : manages
ClientHandler "1" -- "1" Client : uses

@enduml
